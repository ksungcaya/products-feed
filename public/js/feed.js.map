{"version":3,"sources":["feed.js"],"names":[],"mappingsfile":"feed.js","sourcesContent":["(function () {\n   \n   var ProductsFeed = {\n\n        init: function() {\n            this.feedData = {\n                url: $('a#feed-url').text(),\n                page: 1\n            };\n            this.feedContainer = $('.products__feed');\n            this.feedRequest = {\n                xhr: null,\n                done: false\n            };\n            this.paginationInitialized = false;\n            this.loader = $('.loader');\n            this.error = null;\n\n            this.productModal = $('[data-remodal-id=product-modal]');\n            this.productModalText = this.productModal.find('.modal__text');\n            this.productModalBody = this.productModal.find('.modal__body');\n\n            this.bindEvents();\n            return this;\n        },\n\n        bindEvents: function() {\n            $(window).bind('beforeunload', $.proxy(function() {\n                if ( ! this.feedRequest.done) {\n                    return 'Feed is still processing, do you really want to leave the page?';\n                }\n            }, this));\n        },\n\n        process: function() {\n            this.toggleLoading(true);\n            this.feedRequest.done = false;\n            this.feedRequest.xhr = $.post('/products/feed/process', this.feedData, $.proxy(this.processCallback, this));\n        },\n\n        processCallback: function(data) {\n            var feedData = this.feedData;\n            this.toggleLoading(false);\n\n            if (data.error) {\n                this.feedRequest.done = true;\n                return this.showError(data.error.message);\n            }\n\n            if (this.feedDirectoryNotSet()) {\n                this.feedData.feed_directory = data.feed_directory;\n                this.process();\n                return this.getFeedSet(this.onFirstPageLoad);\n            }\n\n            this.feedRequest.done = true;\n        },\n\n        getFeedSet: function(handler) {\n            var feedData = {\n                feed_directory: this.feedData.feed_directory,\n                page: this.feedData.page\n            };\n\n            this.toggleLoading(true);\n\n            $.post('/products/feed/display', feedData, $.proxy(handler, this));\n        },\n\n        onFirstPageLoad: function(data) {\n            var requestDone = this.feedRequest.done,\n                products = data.products;\n\n            this.toggleLoading(false);\n\n            if (requestDone && ! products) {\n                return this.showError('No feed available from this url.');\n            }\n\n            if (! requestDone && ! products) {\n                return this.getFeedSet(this.onFirstPageLoad);\n            }\n\n            this.createProducts(products);\n            this.initializePagination();\n            this.bindProductEvents();\n        },\n\n        createProducts: function(products) {\n            var html = '',\n                rowHtml = '',\n                rowLimit = 4,\n                columnCount = 0;\n\n            var encloseToRow = function(rowHtml) {\n                return '<div class=\"row\">' + rowHtml + '</div>' + \"\\n\";\n            };\n\n            for(var i = 0, len = products.length; i < len; i++) {\n                rowHtml += this.productHtml(products[i]);\n                columnCount++;\n\n                if (columnCount === rowLimit) {\n                    html += encloseToRow(rowHtml);\n                    rowHtml = '';\n                    columnCount = 0;\n                }\n            }\n            // enclose remaining html\n            html += encloseToRow(rowHtml);\n\n            this.feedContainer.append(html);\n        },\n\n        productHtml: function(product) {\n            var categories = this.extractCategories(product.categories);\n\n            var html = '<div class=\"col-sm-6 col-xs-12 col-md-3\">' + \"\\n\" +\n                       '    <div class=\"product\" data-set=\"'+ this.feedData.page +'\" data-id=\"'+ product.productId +'\">'+ \"\\n\" +\n                       '        <a href=\"'+ product.productUrl +'\" class=\"product__link\" target=\"__blank\" title=\"'+ product.name +'\">'+ \"\\n\" +\n                       '            <img src=\"'+ product.imageUrl +'\" alt=\"'+ product.name +'\" class=\"product__image\">'+ \"\\n\" +\n                       '        </a>'+ \"\\n\" +\n                       '        <div class=\"product__meta\">'+ \"\\n\" +\n                       '           <a href=\"'+ product.productUrl +'\" class=\"product__name\" target=\"__blank\" title=\"'+ product.name +'\">'+ \"\\n\" +\n                       '               '+ product.name + \"\\n\" +\n                       '           </a>'+ \"\\n\" +\n                       '           <div class=\"product__price\">'+ \"\\n\" +\n                       '               <span class=\"product__price__value\">Price: '+ product.price +'</span>'+ \"\\n\" +\n                       '               <span class=\"product__price__currency\">'+ product.currency +'</span>'+ \"\\n\" +\n                       '           </div>'+ \"\\n\" +\n                       '           <span class=\"product__categories\" title=\"Categories: '+ categories +'\">Categories: '+ categories +'</span>'+ \"\\n\" +\n                       '      </div>'+ \"\\n\" +\n                       '   </div>'+ \"\\n\" +\n                       '</div>' + \"\\n\";\n\n            return html;\n        },\n\n        extractCategories: function(categories) {\n            if (! categories) {\n                return 'N/A';\n            }\n\n            return categories.join(', ');\n        },\n\n        initializePagination: function() {\n            if ( ! this.paginationInitialized) {\n                this.loadMoreButton = $('<button/>', { \n                    text: 'Load more...',\n                    class: 'load-more-btn btn btn-default'\n                });\n\n                this.loadMoreButton.initialText = this.loadMoreButton.text();\n\n                this.loader.after(this.loadMoreButton);\n                this.loadMoreButton.on('click', $.proxy(this.loadMoreClick, this));\n            }\n        },\n\n        loadMoreClick: function() {\n            this.feedData.page++;\n            this.loadMoreButton.text('Loading...').prop('disabled', true);\n            this.getFeedSet(this.onLoadMore);\n        },\n\n        onLoadMore: function(data) {\n            var loadMoreButton = this.loadMoreButton;\n\n            this.toggleLoading(false);\n\n            // all feed set are loaded.\n            if ( ! data.products && this.feedRequest.done) {\n                return loadMoreButton.text('No more products to load.')\n                         .prop('disabled', true)\n                         .unbind('click');\n            }\n\n            // if feed request is not yet done and no data returned, attempt to fetch the next page.\n            if (! data.products && ! this.feedRequest.done) {\n                this.feedData.page++;\n                return this.getFeedSet(this.onLoadMore);\n            }\n\n            loadMoreButton.text(loadMoreButton.initialText).prop('disabled', false);\n            this.createProducts(data.products);\n        },\n\n        bindProductEvents: function() {\n            var _this = this;\n                params = { feed_directory: this.feedData.feed_directory};\n\n            this.feedContainer.on('click', '.product', function(e) {\n                e.preventDefault();\n\n                _this.productModalBody.empty();\n                _this.productModalText.text('Fetching product...');\n                _this.getProductModal().open();\n\n                params.page = $(this).data('set') || _this.feedData.page;\n                params.product_id = $(this).data('id');\n\n                $.post('/products/feed/display/product', params, $.proxy(_this.onProductFetch, _this));\n            });\n        },\n\n        onProductFetch: function(data) {\n            var html = '';\n            if (data.error) {\n                return this.productModalText\n                           .html('<span class=\"feed__error\">' + data.error.message + '</span>');\n            }\n\n            this.productModalText.empty();\n            return this.productModalBody.html(this.productModalHtml(data));\n        },\n\n        getProductModal: function() {\n            return this.productModal.remodal();\n        },\n\n        productModalHtml: function(product) {\n            return '<div class=\"row\">'+\n                   '    <div class=\"col-sm-4 col-xs-12\">' + \"\\n\" +\n                   '        <a href=\"\" target=\"__blank\">' + \"\\n\" +\n                   '            <img src=\"'+ product.imageUrl +'\" class=\"product__modal__image\">' + \"\\n\" +\n                   '        </a>' + \"\\n\" +\n                   '        <div class=\"product__modal__meta\">' + \"\\n\" +\n                   '            <div>' + \"\\n\" +\n                   '                <span>Price: '+ product.price +'</span>' + \"\\n\" +\n                   '                <span>'+ product.currency +'</span>' + \"\\n\" +\n                   '            </div>' + \"\\n\" +\n                   '            <span class=\"product__modal__meta\">Categories: '+ this.extractCategories(product.categories) +'</span>' + \"\\n\" +\n                   '        </div>' + \"\\n\" +\n                   '    </div>' + \"\\n\" +\n                   '    <div class=\"col-sm-8 col-xs-12\">' + \"\\n\" +\n                   '        <a href=\"'+ product.productUrl +'\" class=\"product__modal__name\" target=\"__blank\">'+ product.name +'</a>' + \"\\n\" +\n                   '        <div class=\"product__modal__description\">'+ (this.nl2br(product.description) || 'No description available') +'</div>' + \"\\n\" +\n                   '    </div>' + \"\\n\" +\n                   '</div>';\n        },\n\n        feedDirectoryNotSet: function() {\n            return ! this.feedData.feed_directory;\n        },\n\n        showError: function(message) {\n            var error = this.error;\n\n            if ( ! error) {\n                error = this.error = $('<span/>', { \n                    class: 'feed__error'\n                });\n\n                this.feedContainer.append(error);\n            }\n\n            error.hide().text(message).fadeIn(100);\n        },\n\n        hideError: function() {\n            this.error && this.error.fadeOut();\n        },\n\n        toggleLoading: function(show) {\n            if (show) {\n                return this.loader.show();\n            }\n\n            this.loader.fadeOut(1000);\n        },\n\n        nl2br: function(str, is_xhtml) {\n            var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br ' + '/>' : '<br>';\n              return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2');\n        }\n   };\n\n   ProductsFeed.init().process();\n   window.ProductsFeed = ProductsFeed;\n})();"],"sourceRoot":"/source/"}